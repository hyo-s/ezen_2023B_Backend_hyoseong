데이터 베이스
    데이터(자료)베이스(모임) : 자료들의 모임
    여러 사람들이 공유하여 사용할 목적으로 체계화된 데이터의 집합

데이터베이스 종류
    1. 계층형 데이터베이스
    2. 네트워크형 데이터베이스
    3. (*)관계형 데이터베이스
    4. key-value 데이터베이스

용어
    DB : 데이터베이스
    DB SERVER : 데이터베이스 위치하는 곳( port : 3306 ) / 서버:자료제공 vs 클라이언트:자료요청
    DBMS : 데이터베이스 관리 시스템
        오라클, MYSQL, MSSQL 등등 - 약간의 문법차이
    DBA : 데이터베이스 관리자
    SQL : 프로그래밍 언어 --> 문법

      DBA ---------> DBMS ---------> DB
    [개발자]       [소프트웨어]       [자료]
    A저장         insert a          010101-2진수

관계형 데이터베이스  RDBMS
    현재 가장 많이 사용되는 데이터베이스 종류
    행과 열로 이루어진 각각의 테이블을 !!(고유값)을 참조하여 서로 종속되는 관계(=연결)를 표현

테이블 기본용어
    레코드/튜플/행/가로 : 관계된 데이터들의 가로로 묶음 = 객체
    필드/속성/열/세로  : 가장 작은 단위 데이터
    테이블/릴레이션    : 행과 열로 이루어진 데이터집합
    키   : 테이블에서 행의 식별자로 이용되는 식별 데이터
===============================================================================================
제약조건 : 데이터의 검사 규칙
    테이블 선언 시 필드 타입 뒤에서 작성
        create table 테이블명(
            필드명 타입 제약조건명,
            필드명 타입 제약조건명
        );
    종류
        1. not null             : (공백제거) 필드 내에 null 포함하지 않는다.  [ 레코드 삽입 시 필드값을 생략하면 자동으로 null ]
        2. default              : (기본값) 해당 필드의 기본값 설정
        3. unique               : (중복제거) 필드 내 중복된 값을 저장 할 수 없다
        4. primary key(pk 필드명) :  해당 필드를 기본키로 사용 [ 테이블당 1개 이상 권장 ]
        5. foreign key(fk 필드명) references 참조할테이블명(pk 필드) : 해당 필드를 참조키로 사용 [ 참조 테이블에서 사용 ]
===============================================================================================
	SQL : 데이터베이스에서 사용하는 데이터 처리 언어
	    모든 데이터베이스 검색
	     show database;
    1. DDL( Data Definition Language ) 정의어	 [ RollBack 불가능 ]
		create : 데이터베이스 / 테이블 / 뷰 생성
			1. 데이터베이스 생성
				create database	데이터베이스명;
			2. 테이블 생성
				create table 테이블명(필드명 타입 제약조건, 필드명 타입 제약조건);
        drop : 데이터베이스 / 테이블 / 뷰 삭제
			1. 데이터베이스 생성
				drop database if exists 데이터베이스명;
			2. 테이블 생성
				drop table if exists 테이블명;
		use : 사용할 데이터베이스 선택
			use 데이터베이스명;
		truncate : 데이터 삭제
		    truncate table 테이블명;
	2. DML( Data Manipulation Language ) 조작어 *	[ RollBack 불가능 ]
		[C] insert : 레코드 삽입
			모든 레코드 삽입
				insert into 테이블명 values ( 값1, 값2 ); - 필드의 순서에 맞게 대입
            특정 레코드 삽입
				insert into 테이블명 ( 필드1, 필드2 ) values ( 값1, 값2 );
        [R] select	: 레코드 검색
			모든 필드(*)를 표시한 레코드 검색
				select * from 테이블명 ( * 와일드카드 / 전체라는 뜻 )
            특정 필드를 표시한 레코드 검색
				select 필드명 from 테이블명
        [U] update	: 레코드 필드의 값 수정
			모든 레코드의 필드 값 수정
				update 테이블명 set 수정할필드명 = 수정할값, 수정할필드명 = 수정할값;
            특정(조건에 충족하는) 레코드 필드값 수정
				update 테이블명 set 수정할필드명 = 새로운값, 수정할필드명 = 새로운 값 where 조건식;
        [D] delete	: 레코드 삭제
			모든 레코드 삭제
				delete from 테이블명;
            특정(조건에 충족하는) 레코드 삭제
				delete from 테이블명 where 조건식;
	3. 제약조건
	    조건
		not null : 필드에 NULL을 넣지 않겠다
        unique : 중복을 없앤다
        default 값 : 필드에 값을 입력하지 않을때 기본값
        auto_increment : 필드에 자동으로 번호 부여
        primary key
            constraint 제약조건명 primary key( pk필드명 )
            primary key( pk필드명 )
        foreign key
            constraint 제약조건명 foreign key( fk필드명 ) references 참조할테이블명 ( 참조할pk필드명 )
            foreign key( fk필드명 ) references 참조할테이블명 ( 참조할pk필드명 )
        옵션
        restrict : PK데이터를 삭제/수정할 때 PK를 참조하는 FK데이터가 있으면 삭제/수정을 하지 않음
            on delete restrict : 삭제
            on update restrict : 수정
        cascade : PK데이터를 삭제/수정할 때 PK를 참조하는 FK데이터가 있으면 같이 삭제/수정 함
            on delete cascade : 삭제
            on update cascade : 수정
        set null : PK데이터를 삭제/수정할 때 PK를 참조하는 FK데이터가 있으면 PK데이터를 삭제/수정하고 FK데이터를 NULL로 변경
            on delete set null : PK 삭제 후 FK NULL로 변경
            on update set null : PK 수정 후 FK NULL로 변경
	4. WHERE & ON
        where
            select * from 테이블명A, 테이블명B where 테이블명A_PK필드명 = 테이블명B_FK필드명;
                테이블명A와 테이블명B에서 테이블명A_PK필드명과 테이블명B_FK필드명이 같으면 검색
        내부 JOIN
            select * from 테이블명A natural join 테이블명B;
                테이블명A와 테이블명B에서 같은 레코드를 조합 후 검색
            select * from 테이블명A join 테이블명B on 테이블명A_PK필드명 = 테이블명B_FK필드명;
                테이블명A와 테이블명B에서 테이블명A_PK필드명과 테이블명B_FK필드명이 같으면 검색
            select * from 테이블명A join 테이블명B using(필드명);
                테이블명A과 테이블명B에서 필드명을 사용할 때 조합 후 검색
            select * from 테이블명A inner join 테이블명B on 테이블명A_PK필드명 = 테이블명B_FK필드명;
                테이블명A와 테이블명B에서 테이블명A_PK필드명과 테이블명B_FK필드명이 같을 때 조합 후 검색
        외부 JOIN
            select * from 테이블명A right outer join 테이블명B on 테이블명A_PK필드명 = 테이블명B_FK필드명;
                테이블명A와 테이블명B에서 테이블명A_PK필드명과 테이블명B_FK필드명이 같을 때 테이블명B 기준으로 테이블명A 조합 후 검색
            select * from 테이블명A left outer join 테이블명B on 테이블명A_PK필드명 = 테이블명B_FK필드명;
                테이블명A와 테이블명B에서 테이블명A_PK필드명과 테이블명B_FK필드명이 같을 때 테이블명A 기준으로 테이블명B 조합 후 검색

    	연산자
    		1. 산술연산자
    			+ 더하기	- 빼기
    				select mnumber + 10, mnumber - 10 from member;
    				테이블 member에서 mnumber에 더하기 10, 빼기 10을 한 후 검색
                * 곱하기	/ 나누기
    				select mnumber * 10, mnumber /3 from member;
    				테이블 member에서 mnumber에 곱하기 10, 나누기 10을 한 후 검색
                div 몫	mod 나머지
    				select mnumber div 3, mnumber mod 3 from member;
    				테이블 member에서 mnumber에 나누기 10을 한 후 몫과 나머지 검색
            2. 비교연산자
    			= 같다	!= 같지 않다
    				select * from member where mnumber = 4;
    				테이블 member에서 mnumber가 4이면 검색
                    select * from member where mnumber != 4;
                    테이블 member에서 mnumber가 4가 아니면 검색
    			> 초과	>= 이상
    				select * from member where mnumber > 4;
    				테이블 member에서 mnumber가 4보다 크면 검색
                    select * from member where mnumber >= 5;
                    테이블 member에서 mnumber가 5보다 크거나 같으면 검색
    			< 미만	<= 이하
    				select * from member where mnumber < 5;
    				테이블 member에서 mnumber가 5보다 작으면 검색
    				select * from member where mnumber <= 5;
    				테이블 member에서 mnumber가 5보다 작거나 같으면 검색
            3. 논리연산자
    			and 이면서	or 이거나		not 부정
    				select * from member where mheight >=165 and mheight <=170;
    				테이블 member에서 mheight가 165 이상이고 170이하이면 검색
                    select * from member where mheight >= 165 or mnumber > 6;
                    테이블 member에서 mheight가 165 이상이거나 mnumber가 6보다 크면 검색
            4. 기타연산자
    			필드명 between 시작값 and 끝값	: 시작값부터 끝값 까지 사이
    				select * from member where mheight between 165 and 170;
    				테이블 member에서 mheight의 값을 165부터 170까지만 검색
    			필드명 in( '값', '값', '값' ) 	: 여러 값 중 하나라도 포함하면 true
    				select * from member where maddr in('경기', '전남', '경남');
    				테이블 member에서 maddr 안에 '경기', '전남', '경남'이 하나라도 있으면 검색
                필드명 like 패턴
    				1. % : 모든 문자 수 대응 앞뒤 구분
    					select * from member where mname like '에이%';
    					테이블 member에서 mname의 앞글자가 '에이'이면 검색
    				2. _ : _개수 만큼의 문자 대응 앞뒤 구분
    					select * from member where mname like '__핑크';
    					테이블 member에서 mname의 값이 '핑크'가 뒤에 포함된 4글자이면 검색
    			null
    				필드명 is null
    					select * from member where mphone1 is null;
    					테이블 member에서 mphone1이 null이면 검색
                    필드명 is not null
    					select * from member where mphone1 is not null;
    					테이블 member에서 mphone1이 null이 아니면 검색

        1. as 별칭 			: 필드나 테이블의 별칭
        2. where 조건절
        3. order by 필드명	: 정렬
    		오름차순 : 1, 2, 3, 4 과거 -> 최신, a, b, c, d, 가, 나, 다, 라
    		order by 필드명 (asc)					: 주어진 필드 기준으로 오름차순 ( 기본값 )
    		select * from member order by mdebut asc;
    		테이블 member에서 mdebut 기준으로 오름차순 정렬
            order by 필드명 desc					    : 주어진 필드 기준으로 내림차순
            select * from member order by mdebut desc;
            테이블 member에서 mdebut 기준으로 내림차순 정렬
            order by 필드명 정렬기준, 필드명 정렬기준	: 2개 이상의 정렬
            select * from member order by mheight desc, mdebut asc;
    			앞 정렬된 데이터에서 동일한 데이터끼리의 후 정렬
    	4. limit		: 레코드 검색 제한
    		select * from 테이블명 where 조건절 order by 필드명 asc / desc limit 시작번호(0), 개수
    		select * from member limit 2;
            select * from member limit 0, 3;
    	5. distinct		: 필드 값 중복 제거
    		select distinct from 테이블명 where 조건절 order by 정렬필드 asc/desc limit 개수

    	6. 집계함수
    		1. sum( 필드명 ) 		: 필드 합계
            2. avg( 필드명 ) 		: 필드 평균
            3. max( 필드명 ) 		: 필드 최댓값
            4. min( 필드명 ) 		: 필드 최소값
            5. count( 필드명 ) 	: 필드 레코드 수 ( null 제외 )
    		6. count ( * ) 		: 레코드 수 ( null 포함 )

        7. 특정범위 집계
    		select 필드명 from 테이블명 group by 필드명;
            select mid as 구매자, sum(bamount) as 총수량 from buy group by mid;
            select mid as 구매자, sum(bamount * bprice) as 총매출액 from buy group by mid;
            select mid as 구매자, avg(bamount) as 평균구매수량 from buy group by mid;

        * 순서 *
        select
    		필드명, *, 필드명 as 별칭, distinct 필드명,
    	from
    		테이블명, inner join
    	on
    		조인조건
    	where
    		일반조건
    	group by
    		그룹 필드
    	having
    		그룹 조건
    	order by
    		정렬 필드 asd / desc
    	limit
    		레코드 수 제한

===============================================================================================
자바와 DB 서버 연결
    0.JDBC Driver : 각 DBMS 회사에서 다운로드 받으세요.
    1. IP : 인터넷 프로토콜 = 인터넷 사용하고 있는 PC 들의 식별번호
        PC 1대당 IP 1개 / WIFI 사용시 IP 할당
        서로 다른 PC들 간의 데이터 통신시 식별하기 위해
        예시] 집 주소 ( 친구에게 우편 보내기 위해 집 주소 )
    2. PORT : 프로그램 식별번호
        PC 1대당 많은 PORT  0 ~ 65535
        프로그램(프로세스) 식별하는 번호
        MYSQL : 3306 / ORACLE : 1521 / HTTP : 80
        예시] 방 번호 ( 집에서 방을 식별하는 번호 )
    3. DB 서버의 계정 / 비밀번호
        ROOT / 1234
    4. DB 서버 내 여러개 DB 중 사용할 DB
===============================================================================================
1. MYSQL -> Connector/J 다운로드
    mysql-connector-j-8.3.0.jar
2. 프로젝트에 라이브러리 등록/추가
    1. 프로젝트 해당 파일(mysql-connector-j-8.3.0.jar) 복사
    2. mysql-connector-j-8.3.0.jar -> 우클릭 -> 라이브러리로 추가
    3. [확인]
        메뉴 -> 파일 -> 프로젝트 구조 -> (사이드메뉴) 라이브러리
===============================================================================================
